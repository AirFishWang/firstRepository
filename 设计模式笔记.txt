设计模式的常见7种原则
    （1）单一职责原则:  一个类只负责一个功能领域中的相应职责 
    （2）开闭原则:      软件实体应对扩展开放，而对修改关闭
    （3）里氏代换原则:  所有引用基类对象的地方能够透明地使用其子类的对象
    （4）依赖倒转原则:  抽象不应该依赖于细节，细节应该依赖于抽象(即应该面向接口编程，而不是针对实现编程)
    （5）接口隔离原则:  使用多个专门的接口，而不使用单一的总接口
    （6）合成复用原则:  尽量使用对象组合，而不是继承来达到复用的目的(区分Is-a和Has-a的关系)
    （7）迪米特法则；   一个软件实体应当尽可能少地与其他实体发生相互作用
    博客地址: http://blog.csdn.net/lovelion/article/details/17517213
    
    
1. 简单工厂模式
    将对象的创建与使用分离，防止在客户程序中大量创建对象的代码冗余(例如代码中多处需要依据type创建各种不同的对象，很多if-else)
    缺点: 
    （1）当类比较多的时候，简单工厂类就会显得冗长
    （2）当扩展新的类别的时候，必须修改简单工厂类的代码，违背了开闭原则
2. 工厂方法模式
    声明一个抽象的工作基类，针对每一个产品类，对应的声明一个工厂类(并继承工厂基类)，客户程序根据需要new出不同的工厂，并通过该工厂创建产品对象。
    当需要扩展新的产品类别的时候，只需要添加新的工厂类并继承工厂基类，而不需要修改原来的代码，克服了简单工厂模式的第二个缺点。
    缺点: 每一个类都对应一个工厂，增加了系统的复杂度
3. 抽象工厂模式:
    将具有相同特点的工厂类抽象出来，由子类具体实现
    
4. 单例模式
    确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。
    http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/ 
    
5. 原型模式
    用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象
    工作原理：将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己来实现创建过程