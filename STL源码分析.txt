vector:
    连续空间存储，capacity >= size
    当满载时，capacity成倍增长(分配更大的空间，拷贝数据，释放原来的空间)
    
list:
    存储结构为双向环形链表，对于任何位置的元素插入或元素移除，其时间复杂度均为常数时间。
    
deque(双端队列):
    分段连续空间，维持其“整体连续”假象的任务，是由迭代器的operator++和operator--实现的
    
stack：栈
queue：队列

二叉树：任意节点最多只允许两个节点
二叉搜索树：任意节点的键值一定大于其左子树中每一个节点的键值，小于右子树中任意每一个节点的键值
平衡二叉搜索树: 首先是搜索树，其次其左右子树高度相差最多为1
红黑树：
        所有节点非红即黑
        根节点为黑
        如果节点为红，其子节点必须为黑
        任一节点至NULL(树尾端)的任何路径，所含之黑节点数必须相同
        
        查找，插入和 删除 时间复杂度：O(log n) ，n 是树中元素数目。（因为红黑树是二叉搜索树）
        
set：集合，以红黑树为底层机制。所有元素都会依据元素的键值进行排序，set的键值(key)就是实值(value),不允许两个元素具有相同的键值

map: 映射，以红黑树为底层机制。所有元素都会根据元素的键值进行排序，map的所有元素都是pair，同时拥有实值和键值，
     pair的第一元素被视为键值，第二元素被视为实值，map不允许两个元素拥有相同的键值。
     
hashtable: 散列表
