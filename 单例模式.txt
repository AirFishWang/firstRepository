参考网址： http://www.cnblogs.com/qiaoconglovelife/p/5851163.html 
           http://www.cnblogs.com/cxjchen/p/3148582.html
           
类的声明：
    class Singleton
    {
    private:
        static Singleton* instance;
        
        Singleton(){}
        Singleton(const Singleton&);
        Singleton& operator=(const Singleton&);

    public:
        static Singleton* getInitance();
};

简单的单线程：(非线程安全)     懒汉式

    Singleton* Singleton::instance = NULL;
    Singleton* getInstance()
    {
        if (instance == NULL)
            instance = new Singleton();
 
        return instance;
    }
    
多线程安全： 但是会导致大量线程阻塞   懒汉式
    Singleton* Singleton::instance = NULL;
    Singleton* getInstance()
    {
        lock();
        if (instance == NULL)
            instance = new Singleton();
        unlock();
 
        return instance;
    }
    
多线程安全： 解决线程阻塞，双重锁定  懒汉式
    Singleton* Singleton::instance = NULL;
    Singleton* getInstance()
    {
        if (instance == NULL){    //只有为NULL时，才进入锁的判定
        
            lock();
            if (instance == NULL)
                instance = new Singleton();
            unlock();
       }
 
        return instance;
    }
    
多线程安全： 饿汉式
    Singleton* Singleton::instance = new Singleton();
    Singleton* Singleton::getInstance(){
	return instance;
}
    
    
